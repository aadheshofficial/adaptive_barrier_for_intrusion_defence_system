import nmap

def scan_vulnerable_ftp(ip: str, port: int) -> dict:
    """
    Scans a given IP and port for extensive FTP vulnerabilities using Nmap's NSE scripts.

    Args:
        ip (str): The target IP address to scan.
        port (int): The target FTP port to check.

    Returns:
        dict: A dictionary containing detected FTP vulnerabilities.
    """
    nm = nmap.PortScanner()
    nm.scan(
        hosts=ip, 
        ports=str(port), 
        arguments="--script ftp-vuln*,ftp-anon,ftp-brute,ftp-proftpd-backdoor,ftp-syst,ftp-libopie,ftp-vsftpd-backdoor,ftp-bounce,ftp-capabilities,ftp-currentusers,ftp-dump,ftp-hiddenfiles,ftp-stat,ftp-tls,ftp-unsafe,ftp-version,ssl*,tls-ticketbleed,tls-heartbleed,ssl-dh-params,ssl-cert-intact,ssl-poodle,ssl-ccs-injection,ssl-enum-ciphers,ssl-date"
    )

    results = {}

    if ip in nm.all_hosts():
        for proto in nm[ip].all_protocols():
            if port in nm[ip][proto]:
                script_results = nm[ip][proto][port].get("script", {})
                if script_results:
                    results[port] = script_results  

    return results

def help():
    """
    Provides usage instructions for the scan_vulnerable_ftp function.

    Example:
        ftp_vulns = scan_vulnerable_ftp("192.168.1.1", 21)
        print(ftp_vulns)

    This scans a specific FTP port on the given IP for vulnerabilities, including:
        - Anonymous login access.
        - Weak or default credentials via brute force.
        - Misconfigured permissions allowing unauthorized access.
        - Known vulnerabilities in FTP servers.
        - Backdoor exploits in FTP services.
        - SSL/TLS misconfigurations (if FTPS is enabled).
        - Detection of various FTP server vulnerabilities.

    Returns:
        dict: A dictionary containing detected FTP vulnerabilities.
    """
    help_text = (
        "\nUsage:\n"
        "    Call the function scan_vulnerable_ftp(ip, port) with a valid IP address and port number.\n"
        "    Example:\n"
        "        ftp_vulns = scan_vulnerable_ftp(\"192.168.1.1\", 21)\n"
        "        print(ftp_vulns)\n"
        "    This scans the specified FTP port for known vulnerabilities using Nmap NSE scripts.\n"
        "\nFeatures Scanned:\n"
        "    - Checks for anonymous login access (ftp-anon).\n"
        "    - Detects weak or default credentials via brute force (ftp-brute).\n"
        "    - Identifies misconfigured permissions allowing unauthorized access.\n"
        "    - Scans for known FTP server vulnerabilities (ftp-vuln*).\n"
        "    - Detects FTP backdoors (ftp-proftpd-backdoor, ftp-vsftpd-backdoor).\n"
        "    - Identifies FTP bounce attack risks (ftp-bounce).\n"
        "    - Extracts system information from FTP (ftp-syst).\n"
        "    - Checks for hidden files on FTP servers (ftp-hiddenfiles).\n"
        "    - Analyzes SSL/TLS misconfigurations for FTPS (ssl*).\n"
        "    - Scans for TLS vulnerabilities (tls-ticketbleed, tls-heartbleed, ssl-poodle, etc.).\n"
        "\nArguments:\n"
        "    ip (str): A valid IPv4 address (e.g., \"192.168.1.1\").\n"
        "    port (int): The FTP port to scan (default: 21 for FTP, 990 for FTPS).\n"
        "\nReturns:\n"
        "    dict: A dictionary with detected FTP vulnerabilities.\n"
        "\nNotes:\n"
        "    - Requires Nmap and FTP-related NSE scripts to be installed.\n"
        "    - Ensure you have permission before scanning external IPs.\n"
        "    - Supports scanning of both FTP (port 21) and FTPS (port 990).\n"
    )
    return help_text
